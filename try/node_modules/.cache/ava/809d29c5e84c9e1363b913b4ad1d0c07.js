'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _avaThrowsHelperStart(t, assertion, file, line) {
	if (t._throwsArgStart) {
		t._throwsArgStart(assertion, file, line);
	}
}

function _avaThrowsHelperEnd(t, arg) {
	if (t._throwsArgEnd) {
		t._throwsArgEnd();
	}

	return arg;
}

const { test } = require('ava');
const promise = Promise.reject(new TypeError('err'));

test('rejects', async t => {
	var _rec = new _powerAssertRecorder();

	await t.throws((_avaThrowsHelperStart(t, 'throws', '/Users/wangtingting/try/promise.test.js', 5), _avaThrowsHelperEnd(t, promise)));
	t.truthy(_rec._expr(_rec._capt(promise, 'arguments/0'), {
		content: 't.truthy(promise)',
		filepath: 'promise.test.js',
		line: 6,
		async: true,
		ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"Identifier","name":"promise","range":[9,16]}],"range":[0,17]}',
		tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"promise","range":[9,16]},{"type":{"label":")"},"range":[16,17]}]',
		visitorKeys: _powerAssertVisitorKeys
	}));
});

test('promise', t => {
	return Promise.resolve(1).then(res => {
		t.is(res, 1);
	});
});

test('promise&async', async t => {
	var _rec2 = new _powerAssertRecorder();

	t.plan(1);
	t.truthy(_rec2._expr(_rec2._capt((await _rec2._capt(_rec2._capt(Promise, 'arguments/0/argument/callee/object/callee/object').resolve('success'), 'arguments/0/argument/callee/object').then(data => {
		console.log(data);
	})), 'arguments/0'), {
		content: 't.truthy((await Promise.resolve(\'success\').then(data => { console.log(data); })))',
		filepath: 'promise.test.js',
		line: 17,
		async: true,
		ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"AwaitExpression","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Promise","range":[16,23]},"property":{"type":"Identifier","name":"resolve","range":[24,31]},"computed":false,"range":[16,31]},"arguments":[{"type":"StringLiteral","value":"success","range":[32,41]}],"range":[16,42]},"property":{"type":"Identifier","name":"then","range":[43,47]},"computed":false,"range":[16,47]},"arguments":[{"type":"ArrowFunctionExpression","params":[{"type":"Identifier","name":"data","range":[48,52]}],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"console","range":[58,65]},"property":{"type":"Identifier","name":"log","range":[66,69]},"computed":false,"range":[58,69]},"arguments":[{"type":"Identifier","name":"data","range":[70,74]}],"range":[58,75]},"range":[58,76]}],"directives":[],"range":[56,78]},"async":false,"range":[48,78]}],"range":[16,79]},"range":[10,79]}],"range":[0,81]}',
		tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"("},"range":[9,10]},{"type":{"label":"name"},"value":"await","range":[10,15]},{"type":{"label":"name"},"value":"Promise","range":[16,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"resolve","range":[24,31]},{"type":{"label":"("},"range":[31,32]},{"type":{"label":"string"},"value":"success","range":[32,41]},{"type":{"label":")"},"range":[41,42]},{"type":{"label":"."},"range":[42,43]},{"type":{"label":"name"},"value":"then","range":[43,47]},{"type":{"label":"("},"range":[47,48]},{"type":{"label":"name"},"value":"data","range":[48,52]},{"type":{"label":"=>"},"range":[53,55]},{"type":{"label":"{"},"range":[56,57]},{"type":{"label":"name"},"value":"console","range":[58,65]},{"type":{"label":"."},"range":[65,66]},{"type":{"label":"name"},"value":"log","range":[66,69]},{"type":{"label":"("},"range":[69,70]},{"type":{"label":"name"},"value":"data","range":[70,74]},{"type":{"label":")"},"range":[74,75]},{"type":{"label":";"},"range":[75,76]},{"type":{"label":"}"},"range":[77,78]},{"type":{"label":")"},"range":[78,79]},{"type":{"label":")"},"range":[79,80]},{"type":{"label":")"},"range":[80,81]}]',
		visitorKeys: _powerAssertVisitorKeys
	}));
});

test('promise-catch-truthy', async t => {
	var _rec3 = new _powerAssertRecorder();

	t.plan(3);
	return t.truthy(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(Promise, 'arguments/0/callee/object/callee/object').reject(1), 'arguments/0/callee/object').catch(err => {
		t.is(err, 1);
		t.is(err, 1);
	}), 'arguments/0'), {
		content: 't.truthy(Promise.reject(1).catch(err => { t.is(err, 1); t.is(err, 1); }))',
		filepath: 'promise.test.js',
		line: 22,
		async: true,
		ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Promise","range":[9,16]},"property":{"type":"Identifier","name":"reject","range":[17,23]},"computed":false,"range":[9,23]},"arguments":[{"type":"NumericLiteral","value":1,"range":[24,25]}],"range":[9,26]},"property":{"type":"Identifier","name":"catch","range":[27,32]},"computed":false,"range":[9,32]},"arguments":[{"type":"ArrowFunctionExpression","params":[{"type":"Identifier","name":"err","range":[33,36]}],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[42,43]},"property":{"type":"Identifier","name":"is","range":[44,46]},"computed":false,"range":[42,46]},"arguments":[{"type":"Identifier","name":"err","range":[47,50]},{"type":"NumericLiteral","value":1,"range":[52,53]}],"range":[42,54]},"range":[42,55]},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[56,57]},"property":{"type":"Identifier","name":"is","range":[58,60]},"computed":false,"range":[56,60]},"arguments":[{"type":"Identifier","name":"err","range":[61,64]},{"type":"NumericLiteral","value":1,"range":[66,67]}],"range":[56,68]},"range":[56,69]}],"directives":[],"range":[40,71]},"async":false,"range":[33,71]}],"range":[9,72]}],"range":[0,73]}',
		tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"Promise","range":[9,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"reject","range":[17,23]},{"type":{"label":"("},"range":[23,24]},{"type":{"label":"num"},"value":1,"range":[24,25]},{"type":{"label":")"},"range":[25,26]},{"type":{"label":"."},"range":[26,27]},{"type":{"label":"catch"},"value":"catch","range":[27,32]},{"type":{"label":"("},"range":[32,33]},{"type":{"label":"name"},"value":"err","range":[33,36]},{"type":{"label":"=>"},"range":[37,39]},{"type":{"label":"{"},"range":[40,41]},{"type":{"label":"name"},"value":"t","range":[42,43]},{"type":{"label":"."},"range":[43,44]},{"type":{"label":"name"},"value":"is","range":[44,46]},{"type":{"label":"("},"range":[46,47]},{"type":{"label":"name"},"value":"err","range":[47,50]},{"type":{"label":","},"range":[50,51]},{"type":{"label":"num"},"value":1,"range":[52,53]},{"type":{"label":")"},"range":[53,54]},{"type":{"label":";"},"range":[54,55]},{"type":{"label":"name"},"value":"t","range":[56,57]},{"type":{"label":"."},"range":[57,58]},{"type":{"label":"name"},"value":"is","range":[58,60]},{"type":{"label":"("},"range":[60,61]},{"type":{"label":"name"},"value":"err","range":[61,64]},{"type":{"label":","},"range":[64,65]},{"type":{"label":"num"},"value":1,"range":[66,67]},{"type":{"label":")"},"range":[67,68]},{"type":{"label":";"},"range":[68,69]},{"type":{"label":"}"},"range":[70,71]},{"type":{"label":")"},"range":[71,72]},{"type":{"label":")"},"range":[72,73]}]',
		visitorKeys: _powerAssertVisitorKeys
	}));
});
//# sourceMappingURL=/Users/wangtingting/try/node_modules/.cache/ava/809d29c5e84c9e1363b913b4ad1d0c07.js.map