{"version":3,"sources":["ava.js"],"names":["test","require","promise","Promise","reject","TypeError","t","throws","resolve","then","res","is","plan","falsy","catch","err","console","log","truthy","data","cb","end"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,MAAM,EAACA,IAAD,KAASC,QAAQ,KAAR,CAAf;AACA,MAAMC,UAAUC,QAAQC,MAAR,CAAe,IAAIC,SAAJ,CAAc,IAAd,CAAf,CAAhB;;AAEAL,KAAK,SAAL,EAAgB,MAAMM,CAAN,IAAW;AAC1B,OAAMA,EAAEC,MAAF,kGAASL,OAAT,GAAN;AACA;AACA,CAHD;;AAKAF,KAAK,SAAL,EAAeM,KAAK;AACnB,QAAOH,QAAQK,OAAR,CAAgB,CAAhB,EAAmBC,IAAnB,CAAyBC,GAAD,IAAO;AACtCJ,IAAEK,EAAF,CAAKD,GAAL,EAAS,CAAT;AACC,EAFM,CAAP;AAGA,CAJD;;AAMAV,KAAK,eAAL,EAAsB,MAAMM,CAAN,IAAW;AAAA;AAAA;;AAChCA,GAAEM,IAAF,CAAO,CAAP;AACAN,GAAEO,KAAF,wBAAQ,MAAM,mFAAQT,MAAR,CAAe,MAAf,yCAAuBU,KAAvB,CAA8BC,GAAD,IAAO;AAACC,UAAQC,GAAR,CAAYF,GAAZ;AAAiB,EAAtD,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAT,GAAEY,MAAF,0BAAS,MAAM,qFAAQV,OAAR,CAAgB,SAAhB,yCAA2BC,IAA3B,CAAiCU,IAAD,IAAQ;AAACH,UAAQC,GAAR,CAAYE,IAAZ;AAAkB,EAA3D,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,CAJD;;AAMAnB,KAAK,cAAL,EAAqB,MAAMM,CAAN,IAAW;AAC/BA,GAAEM,IAAF,CAAO,CAAP;AACA,QAAOT,QAAQC,MAAR,CAAe,CAAf,EAAkBU,KAAlB,CAAyBC,GAAD,IAAO;AACrCT,IAAEK,EAAF,CAAKI,GAAL,EAAS,CAAT;AACAT,IAAEK,EAAF,CAAKI,GAAL,EAAS,CAAT;AACA,EAHM,CAAP;AAIA,CAND;;AAQAf,KAAKoB,EAAL,CAAQ,IAAR,EAAcd,CAAD,IAAK;AAClBA,GAAEM,IAAF,CAAO,CAAP;AACAN,GAAEK,EAAF,CAAK,CAAL,EAAO,CAAP;AACAL,GAAEe,GAAF;AACC,CAJD;;AAMArB,KAAK,MAAL,EAAaM,CAAD,IAAK;AACjBA,GAAEM,IAAF,CAAO,CAAP;AACAN,GAAEK,EAAF,CAAK,CAAL,EAAO,CAAP;AACC,CAHD","file":"ava.js","sourcesContent":["const {test} = require('ava');\nconst promise = Promise.reject(new TypeError('ğŸ¦„'));\n\ntest('rejects', async t => {\n\tawait t.throws(promise);\n\t//t.is(error.message, 'ğŸ¦„');\n});\n\ntest('promise',t => {\n\treturn Promise.resolve(1).then((res)=>{\n\tt.is(res,1);\n\t});\n});\n\ntest('promise&async', async t => {\n\tt.plan(2);\t\n\tt.falsy(await Promise.reject('fail').catch((err)=>{console.log(err)}));\n\tt.truthy(await Promise.resolve('success').then((data)=>{console.log(data)}));\n});\n\ntest('promise-plan', async t => {\n\tt.plan(2);\t\n\treturn Promise.reject(1).catch((err)=>{\n\t\tt.is(err,1);\n\t\tt.is(err,1);\n\t});\n});\n\ntest.cb('cb',(t)=>{\nt.plan(1);\nt.is(1,1);\nt.end();\n});\n\ntest('test',(t)=>{\nt.plan(1);\nt.is(1,1);\n});\n\n\n\n"]}